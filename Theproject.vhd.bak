library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
Entity DSDPROJECT is 
port(
  temp_in : in bit := '0';
  analog_in : in bit := '0' ;
  clock : in STD_LOGIC ;
  pul_senseled : OUT bit ;
  abnormalalarm, normalalarm: out bit ;
   seg1: out STD_LOGIC_VECTOR (6 downto 0);
	seg2 :out STD_LOGIC_VECTOR (6 downto 0);
	seg3 :out STD_LOGIC_VECTOR(6 downto 0);
	abnormal_temp,normal_temp :out bit
	);
	
	end DSDPROJECT;
ARCHITECTURE behaviour of DSDPROJECT is

  signal bmp2 :STD_LOGIC_VECTOR(7 downto 0);
  signal final_clock : STD_LOGIC;
   signal number :integer; 
        signal unit : integer;
        signal ten :integer;
        signal hundredth :integer;
   
 
 component  pulsereader 
 
  port(analog : in bit;
          clk : in STD_LOGIC ;
       pul_sense : OUT bit ;
        abnormal,normal : out bit ;
		  BMPP : out STD_LOGIC_VECTOR (7 downto 0);
		  seg1,seg2,seg3: OUT STD_LOGIC_VECTOR(6 downto 0));
		 
		  
 end component;
 component clk_gen 
 port (clk1: in STD_LOGIC;
       Clk_mod:OUT STD_LOGIC);
		 end component;
 begin 
 
 
 process(temp_in,final_clock)
  begin
  if final_clock'event and final_clock = '1' then 
  
  if temp_in = '1'then 
  abnormal_temp <= '1';
  normal_temp <='0';
  else
  normal_temp <= '1';
  abnormal_temp <= '0';
  end if ;
  
  end if;
  ------report 'the temp'   &  temp_in;
  number <= to_integer(unsigned(bmp2));
  unit<= number mod 10;
  number <= number / 10;
  ten <= number mod 10 ; 
  number <= number/10;
  hundredth <= number mod 10; 
  
  case unit is
when 0 => seg1 <= "0000001";  -- 0
when 1 => seg1 <= "1001111" ; -- 1
when 2 => seg1 <= "0010010" ; -- 2
when 3 => seg1 <= "0000110" ; -- 3
when 4 => seg1 <= "1001100" ; -- 4
when 5 => seg1 <= "0100100" ; -- 5
when 6 => seg1 <= "0100000" ; -- 6
when 7 => seg1 <= "0001111" ; -- 7
when 8 => seg1 <= "0000000" ; -- 8
when 9 => seg1 <= "0000100" ; -- 9
when others => seg1 <= "1111110";
end case;
case hundredth is
when 0 => seg3 <= "0000001";  -- 0
when 1 => seg3 <= "1001111" ; -- 1
when 2 => seg3 <= "0010010" ; -- 2
when 3 => seg3 <= "0000110" ; -- 3
when 4 => seg3 <= "1001100" ; -- 4
when 5 => seg3 <= "0100100" ; -- 5
when 6 => seg3 <= "0100000" ; -- 6
when 7 => seg3 <= "0001111" ; -- 7
when 8 => seg3 <= "0000000" ; -- 8
when 9 => seg3 <= "0000100" ; -- 9
when others => seg3 <= "1111110";
end case;
case ten is
when 0 => seg2 <= "0000001";  -- 0
when 1 => seg2 <= "1001111" ; -- 1
when 2 => seg2 <= "0010010" ; -- 2
when 3 => seg2 <= "0000110" ; -- 3
when 4 => seg2 <= "1001100" ; -- 4
when 5 => seg2 <= "0100100" ; -- 5
when 6 => seg2 <= "0100000" ; -- 6
when 7 => seg2 <= "0001111" ; -- 7
when 8 => seg2 <= "0000000" ; -- 8
when 9 => seg2 <= "0000100" ; -- 9
when others => seg2 <= "1111110";
end case;
  
  
 end process;
 clocky: clk_gen  port map (clock,final_clock);
   pulse: pulsereader port map (analog_in, final_clock ,pul_senseled ,abnormalalarm,normalalarm ,bmp2);
 
 
 
  end behaviour;